#include "windows.h"
#include "binary_tree.h"
#include <iostream>
#include <fstream>
#include <sstream>

using namespace std;

// конструктор
Task19::BinaryTree::BinaryTree()
{
    root = new Node(0); // Корень со значением 0
}

// Вставка элемента по пути
void Task19::BinaryTree::Insert(string& path, int key)
{
    setlocale(LC_ALL, "RU");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    // Проверка пути: только '1' и '0'
    for (char c : path)
    {
        if (c != '0' && c != '1')
        {
            // генерация исключений
            throw invalid_argument("Ошибка: путь должен содержать только символы '0' и '1'");
        }
    }

    // По шагам идём по дереву
    Node* current = root;
    for (size_t i = 0; i < path.length(); i++)
    {
        char dir = path[i];
        if (dir == '0')
        {
            if (!current->left)
            {
                current->left = new Node(-1);
            }
            current = current->left;
        }
        else
        {
            if (!current->right)
            {
                current->right = new Node(-1);
            }
            current = current->right;
        }
    }

    // Проверка на конфликт: если значение уже есть - ошибка
    if (current->key != -1)
    {
        // генерация исключений
        throw runtime_error("Ошибка: узел уже содержит значение");
    }

    current->key = key;
}

// Функция запускающая вывод дерева
void Task19::BinaryTree::Print()
{
    PrintRecursive(root, "", true);
}

// Рекурсивный вывод дерева (визуализация)
void Task19::BinaryTree::PrintRecursive(Node* node, const string& indent, bool last)
{
    if (!node) return;

    cout << indent;

    if (last)
    {
        cout << "|_>";
    }
    else
    {
        cout << "|->";
    }

    cout << node->key << endl;

    string newIndent = indent + (last ? "  " : "| ");

    bool hasLeft = (node->left != nullptr);
    bool hasRight = (node->right != nullptr);

    if (hasRight)
    {
        PrintRecursive(node->right, newIndent, !hasLeft); // сначала правое
    }
        

    if (hasLeft)
    {
        PrintRecursive(node->left, newIndent, true); // потом левое
    }
        
}

// Запуск программы
void Task19::Run()
{
    ifstream file("C:\\work\\c++\\tree_code.txt"); // вставить сюда путь к файлу

    // проверка на существование файла
    if (!file)
    {
        cout << "Не удалось открыть файл \n";
        exit;
    }
    else
    {
        BinaryTree tree;
        string line;
        int line_number = 0;

        // обработка ошибок
        while (getline(file, line))
        {
            line_number++;
            istringstream iss_line(line);
            string key_str, path;

            if (!(iss_line >> key_str >> path))
            {
                cout << "Строка " << line_number << " пропущена: неверный формат.\n";
                continue;
            }

            if (!IsInteger(key_str))
            {
                cout << "Строка " << line_number << " пропущена: '" << key_str << "' не число.\n";
                continue;
            }

            int key = stoi(key_str);

            // вставка в дерево с обработкой ошибок
            try
            {
                tree.Insert(path, key);
            }
            catch (const exception& e)
            {
                cout << "Ошибка в строке " << line_number << ": " << e.what() << "\n";
            }
        }

        cout << "Построенное бинарное дерево:\n";
        tree.Print();
    }
}
